name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  Linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PipeScaler
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install External Dependencies
        run: |
          sudo apt update
          sudo apt -y install pngquant
          sudo apt -y install potrace
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
      - name: Install library
        run: |
          poetry install --no-interaction
      - name: List changed files
        id: files
        uses: jitterbit/get-changed-files@v1
        with:
         format: json
      - name: prospector
        run: |
          cd ${GITHUB_WORKSPACE}
          cat ${{ steps.files.outputs.added_modified }} > modified_files.json
          poetry run prospector -0 -o json:prospector.json pipescaler
          poetry run docs/prospector_reporter.py prospector.json
      - name: pydocstyle
        run: |
          cd ${GITHUB_WORKSPACE}
          poetry run pydocstyle pipescaler > pydocstyle.txt || echo
          poetry run docs/pydocstyle_reporter.py pydocstyle.txt
      - name: Test with pytest
        run: |
          export PACKAGE_ROOT=${GITHUB_WORKSPACE}/pipescaler
          cd ${GITHUB_WORKSPACE}/test
          poetry run pytest -v --cov=pipescaler --cov-report term .
  macOS:
    runs-on: macos-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout PipeScaler
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install External Dependencies
        run: |
          brew install pngquant
          brew install potrace
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
      - name: Install library
        run: |
          poetry install --no-interaction
      - name: Test with pytest
        run: |
          export PACKAGE_ROOT=${GITHUB_WORKSPACE}/pipescaler
          cd ${GITHUB_WORKSPACE}/test
          poetry run pytest -v --cov=pipescaler --cov-report term .
  Windows:
    runs-on: windows-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout PipeScaler
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install External Dependencies
        run: |
          Set-PSDebug -Trace 1
          $ErrorView = 'NormalView'
          Set-Location -Path ${env:GITHUB_WORKSPACE}
          choco install pngquant
          New-Item -Path ${env:GITHUB_WORKSPACE} -Name "executables" -ItemType "directory"
          Invoke-WebRequest -Uri http://potrace.sourceforge.net/download/1.16/potrace-1.16.win64.zip -Outfile potrace-1.16.win64.zip
          Expand-Archive potrace-1.16.win64.zip
          Move-Item -Path ${env:GITHUB_WORKSPACE}\potrace-1.16.win64\potrace-1.16.win64\* -Destination ${env:GITHUB_WORKSPACE}/executables
          Invoke-WebRequest -Uri https://github.com/microsoft/DirectXTex/releases/download/nov2021/texconv.exe -Outfile ${env:GITHUB_WORKSPACE}/executables/texconv.exe
          echo "${env:GITHUB_WORKSPACE}/executables" | Out-File -FilePath $env:GITHUB_PATH
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
      - name: Install library
        run: |
          poetry install --no-interaction
      - name: Test with pytest
        run: |
          Set-PSDebug -Trace 1
          $ErrorView = 'NormalView'
          ${env:PACKAGE_ROOT}="${env:GITHUB_WORKSPACE}\pipescaler"
          Set-Location ${env:GITHUB_WORKSPACE}\test
          poetry run pytest -v --cov=pipescaler --cov-report term .
