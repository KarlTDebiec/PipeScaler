name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  Linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install External Dependencies
        run: |
          sudo apt update
          sudo apt -y install pngquant
          sudo apt -y install potrace
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          version: 1.3.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
      - name: Install library
        run: |
          poetry install --no-interaction

      - name: Identify changes
        id: files
        uses: tj-actions/changed-files@v36
        with:
          write_output_files: true
          json: true

      - name: Run prospector
        run: |
          cd ${GITHUB_WORKSPACE}
          poetry run prospector -A -u flask -T -0 -o text -o json:${GITHUB_WORKSPACE}/.github/outputs/prospector.json .
      - name: Annotate with Prospector results
        uses: KarlTDebiec/LinterPrinter@feature/initial-implementation
        with:
          tool: prospector
          tool_infile: .github/outputs/prospector.json
          files_to_annotate_infile: .github/outputs/all_changed_and_modified_files.json
      - name: pydocstyle # Run separately because prospector does not honor pyproject.toml
        run: |
          cd ${GITHUB_WORKSPACE}
          poetry run pydocstyle . | tee ${GITHUB_WORKSPACE}/.github/outputs/pydocstyle.txt || echo
      - name: Annotate with pydocstyle results
        uses: KarlTDebiec/LinterPrinter@feature/initial-implementation
        with:
          tool: pydocstyle
          tool_infile: .github/outputs/pydocstyle.txt
          files_to_annotate_infile: .github/outputs/all_changed_and_modified_files.json
      - name: mypy
        run: |
          cd ${GITHUB_WORKSPACE}
          poetry run mypy . | tee ${GITHUB_WORKSPACE}/.github/outputs/mypy.txt || echo
      - name: Annotate with mypy results
        uses: KarlTDebiec/LinterPrinter@feature/initial-implementation
        with:
          tool: mypy
          tool_infile: .github/outputs/mypy.txt
          files_to_annotate_infile: .github/outputs/all_changed_and_modified_files.json
      - name: pytest
        run: |
          export PACKAGE_ROOT=${GITHUB_WORKSPACE}/pipescaler
          cd ${GITHUB_WORKSPACE}/test
          poetry run pytest -v --cov=pipescaler --cov-report term . | tee ${GITHUB_WORKSPACE}/.github/outputs/pytest.txt || echo
      - name: Annotate with pytest results
        uses: KarlTDebiec/LinterPrinter@feature/initial-implementation
        with:
          tool: pytest
          tool_infile: .github/outputs/pytest.txt
          files_to_annotate_infile: .github/outputs/all_changed_and_modified_files.json

  macOS:
    runs-on: macos-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install External Dependencies
        run: |
          brew install apngasm
          brew install pngquant
          brew install potrace
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          version: 1.3.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
      - name: Install library
        run: |
          poetry install --no-interaction
      - name: pytest
        run: |
          export PACKAGE_ROOT=${GITHUB_WORKSPACE}/pipescaler
          cd ${GITHUB_WORKSPACE}/test
          poetry run pytest -v --cov=pipescaler --cov-report term .

  Windows:
    runs-on: windows-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install External Dependencies
        run: |
          Set-PSDebug -Trace 1
          $ErrorView = 'NormalView'
          Set-Location -Path ${env:GITHUB_WORKSPACE}
          New-Item -Path ${env:GITHUB_WORKSPACE} -Name "executables" -ItemType "directory"
          Invoke-WebRequest -Uri http://potrace.sourceforge.net/download/1.16/potrace-1.16.win64.zip -Outfile potrace-1.16.win64.zip
          Expand-Archive potrace-1.16.win64.zip
          Move-Item -Path ${env:GITHUB_WORKSPACE}\potrace-1.16.win64\potrace-1.16.win64\* -Destination ${env:GITHUB_WORKSPACE}/executables
          Invoke-WebRequest -Uri https://github.com/microsoft/DirectXTex/releases/download/nov2021/texconv.exe -Outfile ${env:GITHUB_WORKSPACE}/executables/texconv.exe
          echo "${env:GITHUB_WORKSPACE}/executables" | Out-File -FilePath $env:GITHUB_PATH
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          version: 1.3.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        shell: bash
        run: |
          poetry install --no-interaction --no-root
      - name: Install library
        shell: bash
        run: |
          poetry install --no-interaction
      - name: pytest
        shell: bash
        run: |
          source $VENV
          export PACKAGE_ROOT=${GITHUB_WORKSPACE}/pipescaler
          cd ${GITHUB_WORKSPACE}/test
          pytest -v --cov=pipescaler --cov-report term .
